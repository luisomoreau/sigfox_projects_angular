angular.module('SgfProjects', ['ui.bootstrap', 'ui.router', 'ngCookies', 'chart.js']);
'use strict';

/**
 * Route configuration for the SgfProjects module.
 */
angular.module('SgfProjects').config(['$stateProvider', '$urlRouterProvider',
    function($stateProvider, $urlRouterProvider) {

        // For unmatched routes
        $urlRouterProvider.otherwise('/devices');

        // Application routes
        $stateProvider
            .state('index', {
                url: '/',
                templateUrl: 'templates/devices.html'
            })
            .state('tables', {
                url: '/tables',
                templateUrl: 'templates/tables.html'
            })
            .state('devices', {
                url: '/devices',
                templateUrl: 'templates/devices.html'
            })
            .state('settings', {
                url: '/settings',
                templateUrl: 'templates/settings.html'
            })
            .state('documentation', {
                url: '/documentation',
                templateUrl: 'templates/documentation.html'
            });
    }
]);
/**
 * Loading Directive
 * @see http://tobiasahlin.com/spinkit/
 */

angular
    .module('SgfProjects')
    .directive('rdLoading', rdLoading);

function rdLoading() {
    var directive = {
        restrict: 'AE',
        template: '<div class="loading"><div class="double-bounce1"></div><div class="double-bounce2"></div></div>'
    };
    return directive;
};
/**
 * Widget Body Directive
 */

angular
    .module('SgfProjects')
    .directive('rdWidgetBody', rdWidgetBody);

function rdWidgetBody() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            loading: '@?',
            classes: '@?'
        },
        transclude: true,
        template: '<div class="widget-body" ng-class="classes"><rd-loading ng-show="loading"></rd-loading><div ng-hide="loading" class="widget-content" ng-transclude></div></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Footer Directive
 */

angular
    .module('SgfProjects')
    .directive('rdWidgetFooter', rdWidgetFooter);

function rdWidgetFooter() {
    var directive = {
        requires: '^rdWidget',
        transclude: true,
        template: '<div class="widget-footer" ng-transclude></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Header Directive
 */

angular
    .module('SgfProjects')
    .directive('rdWidgetHeader', rdWidgetTitle);

function rdWidgetTitle() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            title: '@',
            icon: '@'
        },
        transclude: true,
        template: '<div class="widget-header"><div class="row"><div class="pull-left"><i class="fa" ng-class="icon"></i> {{title}} </div><div class="pull-right col-xs-6 col-sm-4" ng-transclude></div></div></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Directive
 */

angular
    .module('SgfProjects')
    .directive('rdWidget', rdWidget);

function rdWidget() {
    var directive = {
        transclude: true,
        template: '<div class="widget" ng-transclude></div>',
        restrict: 'EA'
    };
    return directive;

    function link(scope, element, attrs) {
        /* */
    }
};
/**
 * Alerts Controller
 */

angular
    .module('SgfProjects')
    .controller('AlertsCtrl', ['$scope', AlertsCtrl]);

function AlertsCtrl($scope) {
    $scope.alerts = [
        // {
        // type: 'success',
        // msg: 'Thanks for visiting! Feel free to create pull requests to improve the dashboard!'
        // }, {
        // type: 'danger',
        // msg: 'Found a bug? Create an issue with as many details as you can.'
        // }
    ];

    $scope.addAlert = function() {
        $scope.alerts.push({
            msg: 'Another alert!'
        });
    };

    $scope.closeAlert = function(index) {
        $scope.alerts.splice(index, 1);
    };
}
/**
 * Devices Controller
 */

angular
    .module('SgfProjects')
    .controller('DevicesCtrl', ['$scope', 'HttpService', DevicesCtrl]);


function DevicesCtrl($scope, HttpService) {
    $scope.devices = [];
    $scope.messages = [];
    $scope.showMessage = false;
    $scope.showGraph = false;
    $scope.showMore = "Show more";

    //Get all devices
    $scope.getAllDevices = function () {
        HttpService.getDevices(onReady);

        function onReady(items) {
            //console.log(items)
            $scope.devices = items;
        }
    };

    //activate the function when the view is loaded
    $scope.getAllDevices();

    //get device info
    $scope.getInfo = function () {
        if($scope.showMessage==false){
            //We only get the last 24 hours at first to reduce loading time
            $scope.getMessagesFromSpecificDay(1);
        }else{
            $scope.showMessage = false;
            $scope.showMore = "Show more";
        }

    }

    //Filter to get only messages from specific day
    $scope.getMessagesFromSpecificDay = function(day){
        HttpService.getMessagesFromSpecificDay(day, onReady);

        function onReady(items) {
            //console.log(items)
            $scope.messages = items;
            $scope.showMessage = true;
            $scope.showMore = "Show less";
            buildGraph();
        }
    }



    //Build graph
    function buildGraph(){
        $scope.series = ['Ground moisture (%)', 'Lightening (%)', 'temperature (°C)'];
        $scope.labels = [];
        var hum = [];
        var lum = [];
        var temp = [];
        //the data array contains three arrays : hum, lum and temp
        $scope.data = [];
        //iteration to build the graph arrays
        for (i = 0; i < $scope.messages.length; i++) {
            //only get the messages where the time is set
            if ($scope.messages[i].time != null) {
                var days = ["Sun","Mon","Tu","Wed","Thu","Fri","Sat"];
                var date = new Date($scope.messages[i].time);
                var dateLabel = days[date.getDay()] +" "+ date.toLocaleTimeString();
                //console.log(dateLabel);
                $scope.labels.push(dateLabel);
                hum.push($scope.messages[i].hum);
                lum.push($scope.messages[i].lum);
                temp.push($scope.messages[i].temp);
            }
        }
        $scope.data.push(hum);
        $scope.data.push(lum);
        $scope.data.push(temp);
        $scope.showGraph = true;
    }

    $scope.TestTwits = function(){
        var statuses = [
            {
                "tag" : "hot",
                "message":"Wow it's so hot in the office 28°C, can someone turn on the air conditioning system? https://t.co/qblek65GFk"
            },
            {
                "tag" : "dry",
                "message":"Can someone give me some water please? I just passed below 12% of humidity https://t.co/qblek65GFk"
            }
        ];

        var length = statuses.length;

        var random = getRandomTwit(length);

        $scope.status = statuses[random].message;

        $scope.nbChar = $scope.status.length;

        function getRandomTwit(length){
            return Math.floor((Math.random() * length));
        }
    }


}
/**
 * Master Controller
 */

angular.module('SgfProjects')
    .controller('MasterCtrl', ['$scope', '$cookieStore', MasterCtrl]);

function MasterCtrl($scope, $cookieStore) {
    /**
     * Sidebar Toggle & Cookie Control
     */
    var mobileView = 992;

    $scope.getWidth = function() {
        return window.innerWidth;
    };

    $scope.$watch($scope.getWidth, function(newValue, oldValue) {
        if (newValue >= mobileView) {
            if (angular.isDefined($cookieStore.get('toggle'))) {
                $scope.toggle = ! $cookieStore.get('toggle') ? false : true;
            } else {
                $scope.toggle = true;
            }
        } else {
            $scope.toggle = false;
        }

    });

    $scope.toggleSidebar = function() {
        $scope.toggle = !$scope.toggle;
        $cookieStore.put('toggle', $scope.toggle);
    };

    window.onresize = function() {
        $scope.$apply();
    };
}
/**
 * Settings Controller
 */

angular
    .module('SgfProjects')
    .controller('SettingsCtrl', ['$scope', 'HttpService', SettingsCtrl]);


function SettingsCtrl($scope, HttpService) {
    $scope.remaining = 140;
    $scope.message = "";
    $scope.disableButton = true;
    $scope.getRemainingCharacters = function(){
        var length = $scope.message.length;
        $scope.remaining = 140 - length;
        if($scope.message!=""){
            $scope.disableButton = false;
        }else{
            $scope.disableButton = true;
        }
        if($scope.remaining<0){
            $scope.disableButton = true;
        }

    }
}
/**
 * Http Service
 * This service let you connect to the REST API
 */

angular
    .module('SgfProjects')
    .service('HttpService', ['$http', HttpService]);


function HttpService($http) {
    this.getBaseURL = getBaseURL;

    this.getDevices = getDevices;
    this.getMessages = getMessages;
    this.getMessagesFromSpecificDay = getMessagesFromSpecificDay;

    var baseURL = 'http://sigfox.louismoreau.eu:3001/api/';

    function getBaseURL() {
        return baseURL;
    }

    function getDevices(onReady, onError) {
        var url = baseURL + 'devices',

            onError = onError || function () {
                    console.log('Failure loading devices');
                };

        $http
            .get(url)
            .success(onReady)
            .error(onError);
    }
    
    function getMessages(onReady, onError){
        var url = baseURL + 'messages',

            onError = onError || function () {
                    console.log('Failure loading messages');
                };

        $http
            .get(url)
            .success(onReady)
            .error(onError);
    }

    function getMessagesFromSpecificDay(day, onReady, onError){
        var timezone = new Date().getTimezoneOffset();
        var offset = new Date(new Date().getTime() - (day * 24 * 60 * 60 * 1000) + (timezone * 60 * 1000));

        var url = baseURL + 'messages?filter[where][time][gt]='+offset,

            onError = onError || function () {
                    console.log('Failure loading messages');
                };

        $http
            .get(url)
            .success(onReady)
            .error(onError);
    }

}
